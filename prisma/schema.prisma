// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  username       String?
  gh_username    String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  favoriteIds    String[]  @db.ObjectId
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts    Account[]
  memberships Membership[]
  Site        Site[]
  Session     Session[]
}

model Organization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships Membership[]
}

model Membership {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  role      MembershipRole
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?       @db.ObjectId

  @@unique([userId, organizationId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expired_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String?
  description   String?
  content       String?
  slug          String   @default(cuid())
  image         String?
  imageBlurhash String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?  @db.ObjectId

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Site {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  description   String?
  logo          String?
  font          String   @default("font-cal")
  image         String?
  imageBlurhash String?
  subdomain     String?  @unique
  customDomain  String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?  @db.ObjectId
  posts         Post[]

  @@index([userId])
}

enum MembershipRole {
  OWNER
  MEMBER
}
